plugins {
	id("qsl.module")
}

qslModule {
	name = "Quilt Item Extension API"
	moduleName = "item_extension"
	id = "quilt_item_extension"
	description = "An API for extending various vanilla items and providing relevant events for such items."
	library = "item"
	moduleDependencies {
		core {
			api("qsl_base")
		}
	}
	accessWidener()
	injectedInterface("net/minecraft/class_1753") {
		values = ["org/quiltmc/qsl/item/extension/api/bow/BowExtensions"]
	}
	injectedInterface("net/minecraft/class_1764") {
		values = ["org/quiltmc/qsl/item/extension/api/crossbow/CrossbowExtensions"]
	}
}

import org.objectweb.asm.ClassReader
import org.objectweb.asm.Opcodes
import org.objectweb.asm.Type
import org.objectweb.asm.tree.ClassNode

import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import java.util.stream.Collectors

task generateAccessWidener {
	group = "generation"
	doLast {
		List<String> lines = file("template.accesswidener").text.lines().collect(Collectors.toCollection { [] })
		java.nio.file.Path inputJar = loom.namedMinecraftProvider.parentMinecraftProvider.mergedJar

		try (def fs = FileSystems.newFileSystem(URI.create("jar:${inputJar.toUri()}"), [create: false])) {
			generateItemConstructors(lines, fs)
		}

		file('src/main/resources/quilt_item_extension.accesswidener').text = String.join('\n', lines) + '\n'
	}
}

def generateItemConstructors(List<String> lines, FileSystem fs) {
	lines.add("# Constructors of non-abstract item classes")
	Files.list(fs.getPath("net/minecraft/item"))
			.filter { Files.isRegularFile(it) && it.toString().endsWith(".class") }
			.map { loadClass(it) }
			.sorted(Comparator.comparing { it.name })
			.filter { (it.access & Opcodes.ACC_ABSTRACT) == 0 }
			.forEach { node ->
				for (def method : node.methods) {
					// Checklist for finding item constructors as of 1.19.3:
					//  - class directly in net.minecraft.item (excluding subpackages)
					//  - method name == <init> (by definition)
					//  - contains an Item$Settings parameter
					//  - only taking into account non-abstract classes and non-public constructors

					// Item constructor...
					if (method.name == "<init>" && Type.getArgumentTypes(method.desc).any { it.internalName == 'net/minecraft/item/Item$Settings' }) {
						// ...and non-public
						if ((method.access & Opcodes.ACC_PUBLIC) == 0) {
							lines.add("transitive-accessible method $node.name <init> $method.desc")
						}
					}
				}
			}
}

ClassNode loadClass(java.nio.file.Path path) {
	def node = new ClassNode()

	try (def is = Files.newInputStream(path)) {
		new ClassReader(is).accept(node, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES)
	}

	return node
}

generateQmj.dependsOn generateAccessWidener

