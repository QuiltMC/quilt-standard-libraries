plugins {
	id("qsl.module")
}

qslModule {
	name = "Quilt Block Extensions API"
	moduleName = "block_extensions"
	id = "quilt_block_extensions"
	description = "Extensions for creating and working with blocks."
	moduleDependencies {
		core {
			api("qsl_base")
			testmodOnly("resource_loader")
		}
	}
	accessWidener()
}


import org.objectweb.asm.Opcodes
import org.objectweb.asm.Type
import qsl.internal.analysis.ClassAnalysisUtils
import qsl.internal.task.GenerateAccessWidenerTask

import java.nio.file.FileSystem
import java.nio.file.FileSystems

tasks.register("generateAccessWidener", GenerateAccessWidenerTask) {
	generator = this::generateBlockConstructors
	templatePath.set(file("template.accesswidener"))
	outputPath.set(file('src/main/resources/quilt_block_extensions.accesswidener'))
}

def generateBlockConstructors(List<String> lines, FileSystem fs) {
	lines.add("# Constructors of non-abstract block classes")
	ClassAnalysisUtils.readPackage(fs, "net.minecraft.block")
			.filter { (it.access & Opcodes.ACC_ABSTRACT) == 0 }
			.forEach { node ->
				for (def method : node.methods) {
					// Checklist for finding block constructors as of 1.18.2:
					//  - class directly in net.minecraft.block (excluding subpackages)
					//  - method name == <init> (by definition)
					//  - contains an AbstractBlock$Settings parameter
					//  - only taking into account non-abstract classes and non-public constructors

					// Block constructor...
					if (method.name == "<init>" && Type.getArgumentTypes(method.desc).any { it.internalName == 'net/minecraft/block/AbstractBlock$Settings' }) {
						// ...and non-public
						if ((method.access & Opcodes.ACC_PUBLIC) == 0) {
							lines.add("transitive-accessible method $node.name <init> $method.desc")
						}
					}
				}
			}
}

generateQmj.dependsOn generateAccessWidener
validateAccessWidener.dependsOn generateAccessWidener

// Check that the QuiltBlockSettings class has all required methods.
tasks.register('checkBlockSettings') {
	group "verification"
	dependsOn jar

	doLast {
		def moduleJar = project.buildDir.toPath().resolve("devlibs/${qslModule.moduleName.get()}-${version}-dev.jar")

		try (def moduleFs = FileSystems.newFileSystem(URI.create("jar:${moduleJar.toUri()}"), [create: false])) {
			def mcFs = ClassAnalysisUtils.loadMinecraftJar(project)
			checkBlockSettings(moduleFs, mcFs)
		}
	}
}

check.dependsOn checkBlockSettings

static def checkBlockSettings(FileSystem moduleFs, FileSystem mcFs) {
	def quiltClassName = "org/quiltmc/qsl/block/extensions/api/QuiltBlockSettings"
	def mcClassName = 'net/minecraft/block/AbstractBlock$Settings'
	def quiltClass = ClassAnalysisUtils.readClass(
			ClassAnalysisUtils.getClassPath(moduleFs, quiltClassName)
	)
	def mcClass = ClassAnalysisUtils.readClass(
			ClassAnalysisUtils.getClassPath(mcFs, mcClassName)
	)
	def mcSettingsClassDesc = "L${mcClassName};"
	def quiltClassDesc = "L${quiltClassName};"
	def quiltClassMethods = ClassAnalysisUtils.buildMethodLookup(quiltClass)

	mcClass.methods.stream().filter {
		// Only get the methods that are part of the builder pattern.
		((it.access & Opcodes.ACC_PUBLIC) != 0) && ((it.access & Opcodes.ACC_STATIC) == 0)
				&& it.desc.endsWith(mcSettingsClassDesc)
	}.forEach {
		String desc = it.desc.substring(0, it.desc.length() - mcSettingsClassDesc.length()) + quiltClassDesc

		if (!quiltClassMethods.containsKey(it.name + desc)) {
			throw new GradleException("Missing QuiltBlockSettings builder method ${it.name}${desc}.")
		}
	}

	mcClass.methods.stream().filter {
		// Only get the methods that create a new block Settings instance.
		((it.access & Opcodes.ACC_PUBLIC) != 0) && ((it.access & Opcodes.ACC_STATIC) != 0)
				&& it.name.equals("of") && it.desc.endsWith(mcSettingsClassDesc)
	}.forEach {
		String desc = it.desc.substring(0, it.desc.length() - mcSettingsClassDesc.length()) + quiltClassDesc

		if (!quiltClassMethods.containsKey(it.name + desc)) {
			throw new GradleException("Missing QuiltBlockSettings instance method ${it.name}${desc}.")
		}
	}
}
