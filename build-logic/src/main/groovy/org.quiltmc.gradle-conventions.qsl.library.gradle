import qsl.internal.Git
import qsl.internal.library.QSLLibraryExtension

plugins {
	id("maven-publish")
	id("net.kyori.indra.git")
	id("org.quiltmc.gradle-conventions.qsl.common")
}

def extension = project.extensions.create("qslLibrary", QSLLibraryExtension, project)

group = "org.quiltmc.qsl-prototype"
version = project.qsl_library_version

afterEvaluate {
	task runTestmodClient(type: org.quiltmc.loom.task.RunClientTask) {
		subprojects.each {
			classpath += it.sourceSets.testmod.runtimeClasspath
		}
	}

	task runTestmodServer(type: org.quiltmc.loom.task.RunServerTask) {
		subprojects.each {
			classpath += it.sourceSets.testmod.runtimeClasspath
		}
	}

	task runAutoTestServer(type: org.quiltmc.loom.task.RunServerTask) {
		subprojects.each {
			classpath += it.sourceSets.testmod.runtimeClasspath
		}
		jvmArgs "-Dquilt.autoTest"
		args "--nogui"
	}
}

jar {
	enabled = false
}

remapJar {
	enabled = false
}

task checkLibVersion {
	doFirst {
		try {
			def xml = new URL("https://maven.quiltmc.org/repository/release/org/quiltmc/qsl/$project.qsl_library/$project.version/" +
					"$project.qsl_library-$project.qsl_library_version" + ".pom").text
			def metadata = new groovy.xml.XmlSlurper().parseText(xml)

			if (metadata.properties.hash != Git.getLatestCommitHash(project)) {
				throw new RuntimeException("Library is already published with a different hash!")
			}
		} catch (FileNotFoundException ignored) {
			//
		}
	}
}

project.getTasksByName("checkModuleVersion", true).each {
	checkLibVersion.mustRunAfter it
}

publishing {
	repositories {
		mavenLocal()
	}

	publications {
		mavenJava(MavenPublication) {
			pom.withXml {
				asNode().appendNode("properties").appendNode("hash", Git.getLatestCommitHash(project))
				def depsNode = asNode().appendNode("dependencies")
				rootProject.subprojects.stream().filter {
					it.path.startsWith(":$qsl_library:")
				}.forEach {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}
}

publish.dependsOn checkLibVersion
