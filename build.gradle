import qsl.internal.Versions

plugins {
	id("maven-publish")
	id("org.jetbrains.gradle.plugin.idea-ext") version("1.1.3")
	id("qsl.common")
}
def ENV = System.getenv()
group = "org.quiltmc"
version = Versions.QSL_VERSION

// Takes "1.0.0-beta.1" and changes it to "1.0.0-beta.2, unless we are releasing.
// TODO: there is no way to semantically identify if a release is a snapshot or not right now
if (version.contains("beta") && !ENV.MAVEN_URL) {
	int beta = Integer.parseInt(version.substring(version.indexOf("beta.") + 5))
	version = version.replace(version.substring(version.indexOf("beta.")), "beta." + (beta + 1))
}

version = version + "+" + Versions.MINECRAFT_VERSION + (System.getenv("SNAPSHOTS_URL") ? "-SNAPSHOT" : "")
println("QSL: " + version)
sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

// The root project simply just publishes all artifacts.
// For that reason, do not generate a remapped jar.
prepareRemapJar {
	enabled = false
}

remapJar {
	enabled = false
}

jar {
	enabled = false
}

task fatJavadoc(type: Javadoc) {
	options {
		source = String.valueOf(Versions.JAVA_VERSION)
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				"https://guava.dev/releases/21.0/api/docs/",
				"https://asm.ow2.io/javadoc/",
				"https://docs.oracle.com/en/java/javase/16/docs/api/",
				"https://jenkins.liteloader.com/job/Mixin/javadoc/",
				"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/",
				"https://maven.quiltmc.org/repository/release/org/quiltmc/quilt-mappings/${Versions.MINECRAFT_VERSION}+build.${Versions.MAPPINGS_BUILD}/quilt-mappings-${Versions.MINECRAFT_VERSION}+build.${Versions.MAPPINGS_BUILD}-javadoc.jar/"
		)

		// Disable the overzealous doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")
		tags(
				"author:a",
				'reason:m:"Reason:"'
		)
	}

	failOnError false

	exclude {
		it.file.absolutePath.contains("mixin") || it.file.absolutePath.contains("impl")
	}

	afterEvaluate {
		subprojects.each { subproject ->
			subproject.tasks.withType(Javadoc).each { javadocTask ->
				source += javadocTask.source
				classpath += javadocTask.classpath
			}
		}

		println(source.getFiles())
	}
	destinationDir = file("${buildDir}/docs/fat-javadoc")
}


task fatJavadocJar(type: Jar) {
	classifier "fat-javadoc"
	dependsOn fatJavadoc
	from fatJavadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact fatJavadocJar

			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")

				rootProject.subprojects.stream().filter {
					it.path.count(':') == 1
				}.forEach {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}
}

loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

// Because we rely on the results of our libraries, we use afterEvaluate to setup the sourcesets and testmod tasks.
afterEvaluate {
	// Add sourceSet dependencies on all libraries
	// Make this project include the compileClasspath and runtimeClasspath of the libraries.
	subprojects.stream().filter { it.path.count(":") == 1 }.each {
		project.sourceSets.main.compileClasspath += it.sourceSets.main.compileClasspath
		project.sourceSets.main.runtimeClasspath += it.sourceSets.main.runtimeClasspath
		project.sourceSets.testmod.compileClasspath += it.sourceSets.testmod.compileClasspath
		project.sourceSets.testmod.runtimeClasspath += it.sourceSets.testmod.runtimeClasspath
	}
}

loom {
	runs {
		testmodClient {
			client()
			configName = "Testmod Client"
			source(project.sourceSets.testmod)
		}

		testmodServer {
			server()
			configName = "Testmod Server"
			source(project.sourceSets.testmod)
		}

		// Auto test server, a server is ran for a few seconds and testmods run to verify things such as mixin
		// application function properly.
		// This task is typically ran by the CI server.
		autoTestServer {
			server()
			configName = "Auto test server"
			source(project.sourceSets.testmod)
			property("quilt.auto_test")
			programArg("--nogui")
		}
	}
}
afterEvaluate {
	def generateQmjForIdea = tasks.create("generateQmjForIdea")
	project.subprojects.each {
		it.subprojects.each {
			generateQmjForIdea.dependsOn it.tasks.getByName("generateQmj")
		}
	}

	idea {
		project {
			settings {
				taskTriggers {
					afterSync generateQmjForIdea
				}
			}
		}
	}
}

task checkVersion {
	doFirst {
		try {
			def xml = new URL("https://maven.quiltmc.org/repository/release/org/quiltmc/qsl/maven-metadata.xml").text
			def metadata = new groovy.xml.XmlSlurper().parseText(xml)
			def versions = metadata.versioning.versions.version*.text()

			if (versions.contains(version)) {
				throw new RuntimeException("${version} has already been released!")
			}
		} catch (FileNotFoundException ignored) {
			// No existing version of library found
		}
	}
}

project.getTasksByName("checkLibVersion", true).each {
	checkVersion.dependsOn it
}

publish.dependsOn checkVersion
