import qsl.internal.Versions

plugins {
	id("maven-publish")
	id("org.jetbrains.gradle.plugin.idea-ext") version("1.1.3")
	id("qsl.common")
}

group = "org.quiltmc.qsl"
version = Versions.QSL_VERSION + "+" + Versions.MINECRAFT_VERSION + (System.getenv("SNAPSHOTS_URL") ? "-SNAPSHOT" : "")

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

// The root project simply just publishes all artifacts.
// For that reason, do not generate a remapped jar.
prepareRemapJar {
	enabled = false
}

remapJar {
	enabled = false
}

jar {
	enabled = false
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")

				rootProject.subprojects.stream().filter {
					it.path.count(':') == 1
				}.forEach {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}
}

loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

// Because we rely on the results of our libraries, we use afterEvaluate to setup the sourcesets and testmod tasks.
afterEvaluate {
	// Add sourceSet dependencies on all libraries
	// Make this project include the compileClasspath and runtimeClasspath of the libraries.
	subprojects.stream().filter { it.path.count(":") == 1 }.each {
		project.sourceSets.main.compileClasspath += it.sourceSets.main.compileClasspath
		project.sourceSets.main.runtimeClasspath += it.sourceSets.main.runtimeClasspath
		project.sourceSets.testmod.compileClasspath += it.sourceSets.testmod.compileClasspath
		project.sourceSets.testmod.runtimeClasspath += it.sourceSets.testmod.runtimeClasspath
	}
}

loom {
	runs {
		testmodClient {
			client()
			configName = "Testmod Client"
			source(project.sourceSets.testmod)
		}

		testmodServer {
			server()
			configName = "Testmod Server"
			source(project.sourceSets.testmod)
		}

		// Auto test server, a server is ran for a few seconds and testmods run to verify things such as mixin
		// application function properly.
		// This task is typically ran by the CI server.
		autoTestServer {
			server()
			configName = "Auto test server"
			source(project.sourceSets.testmod)
			property("quilt.auto_test")
			programArg("--nogui")
		}
	}
}
afterEvaluate {
	def generateQmjForIdea = tasks.create("generateQmjForIdea")
	project.subprojects.each {
		it.subprojects.each {
			generateQmjForIdea.dependsOn it.tasks.getByName("generateQmj")
		}
	}

	idea {
		project {
			settings {
				taskTriggers {
					afterSync generateQmjForIdea
				}
			}
		}
	}
}


task checkVersion {
	doFirst {
		try {
			def xml = new URL("https://maven.quiltmc.org/repository/release/org/quiltmc/qsl/maven-metadata.xml").text
			def metadata = new groovy.xml.XmlSlurper().parseText(xml)
			def versions = metadata.versioning.versions.version*.text()

			if (versions.contains(version)) {
				throw new RuntimeException("${version} has already been released!")
			}
		} catch (FileNotFoundException ignored) {
			// No existing version of library found
		}
	}
}

project.getTasksByName("checkLibVersion", true).each {
	checkVersion.dependsOn it
}

publish.dependsOn checkVersion
